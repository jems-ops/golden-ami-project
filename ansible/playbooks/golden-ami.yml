---
- name: Configure Golden AMI
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    target_user: ubuntu
    
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - tree
          - unzip
          - jq
          - awscli
          - python3-pip
          - python3-venv
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - fail2ban
          - ufw
          - chrony
          - rsyslog
        state: present

    - name: Install CloudWatch agent
      get_url:
        url: https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
        dest: /tmp/amazon-cloudwatch-agent.rpm
      failed_when: false

    - name: Install Docker
      block:
        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
            state: present

        - name: Install Docker CE
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

        - name: Add user to docker group
          user:
            name: "{{ target_user }}"
            groups: docker
            append: yes

    - name: Configure system security
      block:
        - name: Configure UFW firewall
          ufw:
            state: enabled
            policy: deny
            direction: incoming

        - name: Allow SSH
          ufw:
            rule: allow
            port: 22
            proto: tcp

        - name: Configure fail2ban
          copy:
            dest: /etc/fail2ban/jail.local
            content: |
              [DEFAULT]
              bantime = 3600
              findtime = 600
              maxretry = 3
              
              [sshd]
              enabled = true
              port = ssh
              logpath = /var/log/auth.log
              backend = systemd

        - name: Start and enable fail2ban
          systemd:
            name: fail2ban
            state: started
            enabled: yes

    - name: Configure system monitoring
      block:
        - name: Create CloudWatch config directory
          file:
            path: /opt/aws/amazon-cloudwatch-agent/etc
            state: directory
            mode: '0755'

        - name: Create CloudWatch agent config
          copy:
            dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            content: |
              {
                "agent": {
                  "metrics_collection_interval": 60,
                  "run_as_user": "cwagent"
                },
                "metrics": {
                  "namespace": "CWAgent",
                  "metrics_collected": {
                    "cpu": {
                      "measurement": [
                        "cpu_usage_idle",
                        "cpu_usage_iowait",
                        "cpu_usage_user",
                        "cpu_usage_system"
                      ],
                      "metrics_collection_interval": 60
                    },
                    "disk": {
                      "measurement": [
                        "used_percent"
                      ],
                      "metrics_collection_interval": 60,
                      "resources": [
                        "*"
                      ]
                    },
                    "diskio": {
                      "measurement": [
                        "io_time"
                      ],
                      "metrics_collection_interval": 60,
                      "resources": [
                        "*"
                      ]
                    },
                    "mem": {
                      "measurement": [
                        "mem_used_percent"
                      ],
                      "metrics_collection_interval": 60
                    }
                  }
                },
                "logs": {
                  "logs_collected": {
                    "files": {
                      "collect_list": [
                        {
                          "file_path": "/var/log/syslog",
                          "log_group_name": "/aws/ec2/syslog",
                          "log_stream_name": "{instance_id}"
                        },
                        {
                          "file_path": "/var/log/auth.log",
                          "log_group_name": "/aws/ec2/auth",
                          "log_stream_name": "{instance_id}"
                        }
                      ]
                    }
                  }
                }
              }

    - name: Configure system settings
      block:
        - name: Set timezone
          timezone:
            name: UTC

        - name: Configure chrony for time sync
          copy:
            dest: /etc/chrony/chrony.conf
            content: |
              server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4
              driftfile /var/lib/chrony/drift
              makestep 1.0 3
              rtcsync
              logdir /var/log/chrony

        - name: Start and enable chrony
          systemd:
            name: chrony
            state: started
            enabled: yes

        - name: Configure SSH hardening
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: yes
          with_items:
            - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
            - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
            - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
            - { regexp: '^#?Protocol', line: 'Protocol 2' }
            - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
            - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }

    - name: Create useful directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      with_items:
        - /home/{{ target_user }}/scripts
        - /home/{{ target_user }}/logs

    - name: Create system info script
      copy:
        dest: /home/{{ target_user }}/scripts/system-info.sh
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
        content: |
          #!/bin/bash
          echo "=== System Information ==="
          echo "Hostname: $(hostname)"
          echo "OS: $(lsb_release -d | cut -f2-)"
          echo "Kernel: $(uname -r)"
          echo "Uptime: $(uptime -p)"
          echo "CPU Cores: $(nproc)"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Disk Usage:"
          df -h | grep -vE '^Filesystem|tmpfs|cdrom'
          echo "=== Network ==="
          ip -4 addr show | grep inet

    - name: Create AMI build info
      copy:
        dest: /etc/ami-build-info
        content: |
          AMI_BUILD_DATE={{ ansible_date_time.iso8601 }}
          AMI_BUILD_USER={{ ansible_user_id }}
          ANSIBLE_VERSION={{ ansible_version.full }}
          OS_VERSION={{ ansible_distribution }} {{ ansible_distribution_version }}
          KERNEL_VERSION={{ ansible_kernel }}

    - name: Set proper permissions on home directory
      file:
        path: /home/{{ target_user }}
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
        recurse: yes
